using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using VetPharmacyApi.Data;
using VetPharmacyApi.Services;

var builder = WebApplication.CreateBuilder(args);

// üëá –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏, Swagger
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new Microsoft.OpenApi.Models.OpenApiInfo
    {
        Title = "VetPharmacy API",
        Version = "v1"
    });

    // –î–æ–¥–∞—î–º–æ —Å—Ö–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    options.AddSecurityDefinition("Bearer", new Microsoft.OpenApi.Models.OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = Microsoft.OpenApi.Models.SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = Microsoft.OpenApi.Models.ParameterLocation.Header,
        Description = "–í–≤–µ–¥—ñ—Ç—å —Ç–æ–∫–µ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ: **Bearer {—Ç–æ–∫–µ–Ω}**"
    });

    options.AddSecurityRequirement(new Microsoft.OpenApi.Models.OpenApiSecurityRequirement
    {
        {
            new Microsoft.OpenApi.Models.OpenApiSecurityScheme
            {
                Reference = new Microsoft.OpenApi.Models.OpenApiReference
                {
                    Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});

// üëá –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ë–î
builder.Services.AddDbContext<VetPharmacyDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

// üëá –î–æ–¥–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó JWT
builder.Services.AddScoped<JwtService>();

// üëá –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ JWT
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,

            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]!))
        };
    });

// üëá –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è (–¥–æ—Å—Ç—É–ø –ø–æ —Ä–æ–ª—è—Ö)
builder.Services.AddAuthorization();

var app = builder.Build();

// üëá Swagger
app.UseSwagger();
app.UseSwaggerUI();

// üëá –£–≤—ñ–º–∫–Ω—É—Ç–∏ Authentication —Ç–∞ Authorization
app.UseAuthentication();
app.UseAuthorization();

// üëá –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏
app.MapControllers();

// üëá –¢–µ—Å—Ç–æ–≤–∞ –¥–æ–º–∞—à–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.MapGet("/", () => "–í—ñ—Ç–∞—é! API VetPharmacy –ø—Ä–∞—Ü—é—î.");

using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<VetPharmacyDbContext>();
    DbSeeder.Seed(dbContext);
}

app.Run();