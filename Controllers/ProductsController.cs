using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using VetPharmacyApi.Data;
using VetPharmacyApi.Models;

namespace VetPharmacyApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
    private readonly VetPharmacyDbContext _context;

    public ProductsController(VetPharmacyDbContext context)
    {
        _context = context;
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é (–¥–æ—Å—Ç—É–ø–Ω–æ —Ä–æ–ª—è–º Doctor —ñ Admin).
    /// </summary>
    /// <param name="pageNumber">–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1)</param>
    /// <param name="pageSize">–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10)</param>
    /// <returns>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏</returns>
    /// <response code="200">–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤</response>
    /// <response code="401">–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π</response>
    [Authorize] // Doctor —ñ Admin
    [HttpGet]
    [ProducesResponseType(typeof(IEnumerable<Product>), 200)]
    [ProducesResponseType(401)]
    public async Task<ActionResult<IEnumerable<Product>>> GetProducts(int pageNumber = 1, int pageSize = 10)
    {
        if (pageNumber < 1) pageNumber = 1;
        if (pageSize < 1) pageSize = 10;

        var products = await _context.Products
            .Include(p => p.Category)
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();

        return products;
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é, –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º –∑–∞ –¥–∞—Ç–æ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–¥–æ—Å—Ç—É–ø–Ω–æ —Ä–æ–ª—è–º Doctor —ñ Admin).
    /// </summary>
    /// <param name="search">–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É –≤ –Ω–∞–∑–≤—ñ –ø—Ä–æ–¥—É–∫—Ç—É</param>
    /// <param name="sortOrder">–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ ArrivalDate: asc –∞–±–æ desc (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º desc)</param>
    /// <param name="pageNumber">–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1)</param>
    /// <param name="pageSize">–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10)</param>
    /// <returns>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤</returns>
    [Authorize]
    [HttpGet("filter")]
    [ProducesResponseType(typeof(IEnumerable<Product>), 200)]
    [ProducesResponseType(401)]
    public async Task<ActionResult<IEnumerable<Product>>> GetProduct(
        string? search = null,
        string? sortOrder = "desc",
        int pageNumber = 1,
        int pageSize = 10)
    {
        if (pageNumber < 1) pageNumber = 1;
        if (pageSize < 1) pageSize = 10;
    
        var query = _context.Products
            .Include(p => p.Category)
            .AsQueryable();
    
        // üîç –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –Ω–∞–∑–≤—ñ
        if (!string.IsNullOrWhiteSpace(search))
        {
            query = query.Where(p => p.Name.ToLower().Contains(search.ToLower()));
        }
    
        // üîÉ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        query = sortOrder?.ToLower() == "asc"
            ? query.OrderBy(p => p.ArrivalDate)
            : query.OrderByDescending(p => p.ArrivalDate);
    
        var products = await query
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();
    
        return products;
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–¥—É–∫—Ç (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ Admin).
    /// </summary>
    /// <param name="product">–î–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É</param>
    /// <returns>–°—Ç–≤–æ—Ä–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç</returns>
    /// <response code="201">–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π</response>
    /// <response code="400">–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ</response>
    /// <response code="401">–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∞–±–æ –Ω–µ –º–∞—î —Ä–æ–ª—ñ Admin</response>
    [Authorize(Roles = "Admin")]
    [HttpPost]
    [ProducesResponseType(typeof(Product), 201)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    public async Task<ActionResult<Product>> CreateProduct(Product product)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        _context.Products.Add(product);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, product);
    }

    /// <summary>
    /// –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –∑–∞ ID (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ Admin).
    /// </summary>
    /// <param name="id">–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç—É</param>
    /// <param name="product">–û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É</param>
    /// <returns>–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å</returns>
    /// <response code="204">–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π</response>
    /// <response code="400">–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –∞–±–æ ID –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î</response>
    /// <response code="404">–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π</response>
    /// <response code="401">–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∞–±–æ –Ω–µ –º–∞—î —Ä–æ–ª—ñ Admin</response>
    [Authorize(Roles = "Admin")]
    [HttpPut("{id}")]
    [ProducesResponseType(204)]
    [ProducesResponseType(400)]
    [ProducesResponseType(404)]
    [ProducesResponseType(401)]
    public async Task<IActionResult> UpdateProduct(int id, Product product)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        if (id != product.Id) return BadRequest();
        _context.Entry(product).State = EntityState.Modified;

        try
        {
            await _context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!_context.Products.Any(e => e.Id == id))
                return NotFound();
            else
                throw;
        }

        return NoContent();
    }

    /// <summary>
    /// –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –∑–∞ ID (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ Admin).
    /// </summary>
    /// <param name="id">–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç—É</param>
    /// <returns>–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å</returns>
    /// <response code="204">–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π</response>
    /// <response code="400">–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç</response>
    /// <response code="404">–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π</response>
    /// <response code="401">–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∞–±–æ –Ω–µ –º–∞—î —Ä–æ–ª—ñ Admin</response>
    [Authorize(Roles = "Admin")]
    [HttpDelete("{id}")]
    [ProducesResponseType(204)]
    [ProducesResponseType(400)]
    [ProducesResponseType(404)]
    [ProducesResponseType(401)]
    public async Task<IActionResult> DeleteProduct(int id)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        var product = await _context.Products.FindAsync(id);
        if (product == null) return NotFound();

        _context.Products.Remove(product);
        await _context.SaveChangesAsync();

        return NoContent();
    }
}
